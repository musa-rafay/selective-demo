pipeline {
  agent any

  parameters {
    string(name: 'testbed_name', defaultValue: 'stest', description: 'Name of testbed')
    string(name: 'organization_name', defaultValue: 'rafay', description: 'Organization name')
    string(name: 'username', defaultValue: 'example@rafay.co', description: 'Username')

    // These URLs are autogenerated but exposed for visibility
    string(name: 'console_url', defaultValue: "console-${params.testbed_name}.dev.rafay-edge.net", description: 'Console URL')
    string(name: 'ops_console_url', defaultValue: "ops-console-${params.testbed_name}.dev.rafay-edge.net", description: 'Ops Console URL')
  }

  environment {
    CONSOLE_URL     = "console-${params.testbed_name}.dev.rafay-edge.net"
    OPS_CONSOLE_URL = "ops-console-${params.testbed_name}.dev.rafay-edge.net"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Compute/echo params') {
      steps {
        script {
          echo "testbed_name      = ${params.testbed_name}"
          echo "organization_name = ${params.organization_name}"
          echo "username          = ${params.username}"
          echo "console_url       = ${env.CONSOLE_URL}"
          echo "ops_console_url   = ${env.OPS_CONSOLE_URL}"
        }
      }
    }

    stage('Resolve latest release info') {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'musa-rafay',
                                            usernameVariable: 'GUSER',
                                            passwordVariable: 'GPASS')]) {

            def repo = 'github.com/RafaySystems/rafay-hub.git'

            def branchesOutput = sh(
              returnStdout: true,
              script: """
                bash -c '
                  set -euo pipefail
                  git ls-remote --heads https://\$GUSER:\$GPASS@${repo} \\
                    | awk "{print \\\$2}" | sed "s#refs/heads/##"
                '
              """
            ).trim()

            def branchLines = branchesOutput.split('\\n')
            def filtered = branchLines.findAll { it ==~ /^v\\d+\\.\\d+\\.x$/ }

            if (!filtered) {
              error "No release branches found"
            }

            def sorted = filtered.sort { a, b ->
              def av = a.replace('v','').replace('.x','').split('\\.').collect { it as int }
              def bv = b.replace('v','').replace('.x','').split('\\.').collect { it as int }
              for (int i=0; i<Math.min(av.size(), bv.size()); i++) {
                if (av[i] != bv[i]) return av[i] <=> bv[i]
              }
              return av.size() <=> bv.size()
            }

            env.LATEST_QC_REL_BRANCH = sorted.last()

            def baseurl = "https://jenkins-wh.ops.rafay-edge.net/job/platform-pipelines/job/rctl/job/"
            def url     = "${baseurl}${env.LATEST_QC_REL_BRANCH}/lastStableBuild/api/json"

            def json    = sh(returnStdout: true, script: "curl -s ${url}").trim()
            def parsed  = new groovy.json.JsonSlurper().parseText(json)

            env.LATEST_RCTL_BUILD_NUMBER = parsed.number.toString()

            echo "Latest branch: ${env.LATEST_QC_REL_BRANCH}"
            echo "Last stable build #: ${env.LATEST_RCTL_BUILD_NUMBER}"
          }
        }
      }
    }

    stage('Detect changes') {
      steps {
        script {
          sh 'git fetch --no-tags origin main --quiet'
          def base = sh(returnStdout: true, script: 'git merge-base origin/main HEAD').trim()
          def changed = sh(returnStdout: true,
            script: "git diff --name-only ${base} HEAD"
          ).trim().split('\n')

          echo "Changed files:"
          changed.each { echo "- ${it}" }
        }
      }
    }

    stage('SSH to VM (noop)') {
      steps {
        sshagent(['testbed-vm-ssh']) {
          sh 'ssh -o StrictHostKeyChecking=no ubuntu@144.24.6.170 "echo hello from remote"'
        }
      }
    }
  }

  post {
    failure {
      echo '❌ Pipeline failed.'
    }
    success {
      echo '✅ Pipeline succeeded.'
    }
  }
}
